// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/0311xuyang/chain-util/dal/model"
)

func newChainMetric(db *gorm.DB, opts ...gen.DOOption) chainMetric {
	_chainMetric := chainMetric{}

	_chainMetric.chainMetricDo.UseDB(db, opts...)
	_chainMetric.chainMetricDo.UseModel(&model.ChainMetric{})

	tableName := _chainMetric.chainMetricDo.TableName()
	_chainMetric.ALL = field.NewAsterisk(tableName)
	_chainMetric.UniqueDelegate = field.NewInt32(tableName, "unique_delegate")
	_chainMetric.Date = field.NewTime(tableName, "date")
	_chainMetric.ChainName = field.NewString(tableName, "chain_name")
	_chainMetric.UniqueDelegation = field.NewInt32(tableName, "unique_delegation")
	_chainMetric.UnbondedTokens = field.NewInt64(tableName, "unbonded_tokens")
	_chainMetric.BondedTokens = field.NewInt64(tableName, "bonded_tokens")
	_chainMetric.MarketCap = field.NewInt64(tableName, "market_cap")
	_chainMetric.TotalSupply = field.NewInt64(tableName, "total_supply")
	_chainMetric.CirculatingSupply = field.NewInt64(tableName, "circulating_supply")
	_chainMetric.Transactions = field.NewInt64(tableName, "transactions")
	_chainMetric.BlockTime = field.NewString(tableName, "block_time")
	_chainMetric.Inflation = field.NewString(tableName, "inflation")
	_chainMetric.StakingApr = field.NewString(tableName, "staking_apr")
	_chainMetric.TxsPerBlock = field.NewString(tableName, "txs_per_block")
	_chainMetric.CommunityPool = field.NewInt64(tableName, "community_pool")
	_chainMetric.BlockHeight = field.NewInt64(tableName, "block_height")
	_chainMetric.TotalStake = field.NewInt64(tableName, "total_stake")

	_chainMetric.fillFieldMap()

	return _chainMetric
}

type chainMetric struct {
	chainMetricDo

	ALL               field.Asterisk
	UniqueDelegate    field.Int32
	Date              field.Time
	ChainName         field.String
	UniqueDelegation  field.Int32
	UnbondedTokens    field.Int64
	BondedTokens      field.Int64
	MarketCap         field.Int64
	TotalSupply       field.Int64
	CirculatingSupply field.Int64
	Transactions      field.Int64
	BlockTime         field.String
	Inflation         field.String
	StakingApr        field.String
	TxsPerBlock       field.String
	CommunityPool     field.Int64
	BlockHeight       field.Int64
	TotalStake        field.Int64

	fieldMap map[string]field.Expr
}

func (c chainMetric) Table(newTableName string) *chainMetric {
	c.chainMetricDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chainMetric) As(alias string) *chainMetric {
	c.chainMetricDo.DO = *(c.chainMetricDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chainMetric) updateTableName(table string) *chainMetric {
	c.ALL = field.NewAsterisk(table)
	c.UniqueDelegate = field.NewInt32(table, "unique_delegate")
	c.Date = field.NewTime(table, "date")
	c.ChainName = field.NewString(table, "chain_name")
	c.UniqueDelegation = field.NewInt32(table, "unique_delegation")
	c.UnbondedTokens = field.NewInt64(table, "unbonded_tokens")
	c.BondedTokens = field.NewInt64(table, "bonded_tokens")
	c.MarketCap = field.NewInt64(table, "market_cap")
	c.TotalSupply = field.NewInt64(table, "total_supply")
	c.CirculatingSupply = field.NewInt64(table, "circulating_supply")
	c.Transactions = field.NewInt64(table, "transactions")
	c.BlockTime = field.NewString(table, "block_time")
	c.Inflation = field.NewString(table, "inflation")
	c.StakingApr = field.NewString(table, "staking_apr")
	c.TxsPerBlock = field.NewString(table, "txs_per_block")
	c.CommunityPool = field.NewInt64(table, "community_pool")
	c.BlockHeight = field.NewInt64(table, "block_height")
	c.TotalStake = field.NewInt64(table, "total_stake")

	c.fillFieldMap()

	return c
}

func (c *chainMetric) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chainMetric) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 17)
	c.fieldMap["unique_delegate"] = c.UniqueDelegate
	c.fieldMap["date"] = c.Date
	c.fieldMap["chain_name"] = c.ChainName
	c.fieldMap["unique_delegation"] = c.UniqueDelegation
	c.fieldMap["unbonded_tokens"] = c.UnbondedTokens
	c.fieldMap["bonded_tokens"] = c.BondedTokens
	c.fieldMap["market_cap"] = c.MarketCap
	c.fieldMap["total_supply"] = c.TotalSupply
	c.fieldMap["circulating_supply"] = c.CirculatingSupply
	c.fieldMap["transactions"] = c.Transactions
	c.fieldMap["block_time"] = c.BlockTime
	c.fieldMap["inflation"] = c.Inflation
	c.fieldMap["staking_apr"] = c.StakingApr
	c.fieldMap["txs_per_block"] = c.TxsPerBlock
	c.fieldMap["community_pool"] = c.CommunityPool
	c.fieldMap["block_height"] = c.BlockHeight
	c.fieldMap["total_stake"] = c.TotalStake
}

func (c chainMetric) clone(db *gorm.DB) chainMetric {
	c.chainMetricDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chainMetric) replaceDB(db *gorm.DB) chainMetric {
	c.chainMetricDo.ReplaceDB(db)
	return c
}

type chainMetricDo struct{ gen.DO }

func (c chainMetricDo) Debug() *chainMetricDo {
	return c.withDO(c.DO.Debug())
}

func (c chainMetricDo) WithContext(ctx context.Context) *chainMetricDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainMetricDo) ReadDB() *chainMetricDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainMetricDo) WriteDB() *chainMetricDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainMetricDo) Session(config *gorm.Session) *chainMetricDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainMetricDo) Clauses(conds ...clause.Expression) *chainMetricDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainMetricDo) Returning(value interface{}, columns ...string) *chainMetricDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainMetricDo) Not(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainMetricDo) Or(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainMetricDo) Select(conds ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainMetricDo) Where(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainMetricDo) Order(conds ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainMetricDo) Distinct(cols ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainMetricDo) Omit(cols ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainMetricDo) Join(table schema.Tabler, on ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainMetricDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainMetricDo) RightJoin(table schema.Tabler, on ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainMetricDo) Group(cols ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainMetricDo) Having(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainMetricDo) Limit(limit int) *chainMetricDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainMetricDo) Offset(offset int) *chainMetricDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainMetricDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chainMetricDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainMetricDo) Unscoped() *chainMetricDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainMetricDo) Create(values ...*model.ChainMetric) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainMetricDo) CreateInBatches(values []*model.ChainMetric, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainMetricDo) Save(values ...*model.ChainMetric) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainMetricDo) First() (*model.ChainMetric, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) Take() (*model.ChainMetric, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) Last() (*model.ChainMetric, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) Find() ([]*model.ChainMetric, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChainMetric), err
}

func (c chainMetricDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChainMetric, err error) {
	buf := make([]*model.ChainMetric, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainMetricDo) FindInBatches(result *[]*model.ChainMetric, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainMetricDo) Attrs(attrs ...field.AssignExpr) *chainMetricDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainMetricDo) Assign(attrs ...field.AssignExpr) *chainMetricDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainMetricDo) Joins(fields ...field.RelationField) *chainMetricDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainMetricDo) Preload(fields ...field.RelationField) *chainMetricDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainMetricDo) FirstOrInit() (*model.ChainMetric, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) FirstOrCreate() (*model.ChainMetric, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) FindByPage(offset int, limit int) (result []*model.ChainMetric, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainMetricDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainMetricDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainMetricDo) Delete(models ...*model.ChainMetric) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainMetricDo) withDO(do gen.Dao) *chainMetricDo {
	c.DO = *do.(*gen.DO)
	return c
}
