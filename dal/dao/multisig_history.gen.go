// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/0311xuyang/chain-util/dal/model"
)

func newMultisigHistory(db *gorm.DB, opts ...gen.DOOption) multisigHistory {
	_multisigHistory := multisigHistory{}

	_multisigHistory.multisigHistoryDo.UseDB(db, opts...)
	_multisigHistory.multisigHistoryDo.UseModel(&model.MultisigHistory{})

	tableName := _multisigHistory.multisigHistoryDo.TableName()
	_multisigHistory.ALL = field.NewAsterisk(tableName)
	_multisigHistory.TxHash = field.NewString(tableName, "tx_hash")
	_multisigHistory.Status = field.NewInt32(tableName, "status")
	_multisigHistory.CreateTime = field.NewTime(tableName, "create_time")
	_multisigHistory.MultisigAddr = field.NewString(tableName, "multisig_addr")
	_multisigHistory.Memo = field.NewString(tableName, "memo")
	_multisigHistory.Fees = field.NewString(tableName, "fees")
	_multisigHistory.Height = field.NewString(tableName, "height")
	_multisigHistory.GasUsed = field.NewString(tableName, "gas_used")
	_multisigHistory.GasWanted = field.NewString(tableName, "gas_wanted")
	_multisigHistory.TotalAmount = field.NewString(tableName, "total_amount")
	_multisigHistory.SequenceNumber = field.NewString(tableName, "sequence_number")
	_multisigHistory.Tx = field.NewString(tableName, "tx")

	_multisigHistory.fillFieldMap()

	return _multisigHistory
}

type multisigHistory struct {
	multisigHistoryDo

	ALL            field.Asterisk
	TxHash         field.String
	Status         field.Int32
	CreateTime     field.Time
	MultisigAddr   field.String
	Memo           field.String
	Fees           field.String
	Height         field.String
	GasUsed        field.String
	GasWanted      field.String
	TotalAmount    field.String
	SequenceNumber field.String
	Tx             field.String

	fieldMap map[string]field.Expr
}

func (m multisigHistory) Table(newTableName string) *multisigHistory {
	m.multisigHistoryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m multisigHistory) As(alias string) *multisigHistory {
	m.multisigHistoryDo.DO = *(m.multisigHistoryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *multisigHistory) updateTableName(table string) *multisigHistory {
	m.ALL = field.NewAsterisk(table)
	m.TxHash = field.NewString(table, "tx_hash")
	m.Status = field.NewInt32(table, "status")
	m.CreateTime = field.NewTime(table, "create_time")
	m.MultisigAddr = field.NewString(table, "multisig_addr")
	m.Memo = field.NewString(table, "memo")
	m.Fees = field.NewString(table, "fees")
	m.Height = field.NewString(table, "height")
	m.GasUsed = field.NewString(table, "gas_used")
	m.GasWanted = field.NewString(table, "gas_wanted")
	m.TotalAmount = field.NewString(table, "total_amount")
	m.SequenceNumber = field.NewString(table, "sequence_number")
	m.Tx = field.NewString(table, "tx")

	m.fillFieldMap()

	return m
}

func (m *multisigHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *multisigHistory) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["tx_hash"] = m.TxHash
	m.fieldMap["status"] = m.Status
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["multisig_addr"] = m.MultisigAddr
	m.fieldMap["memo"] = m.Memo
	m.fieldMap["fees"] = m.Fees
	m.fieldMap["height"] = m.Height
	m.fieldMap["gas_used"] = m.GasUsed
	m.fieldMap["gas_wanted"] = m.GasWanted
	m.fieldMap["total_amount"] = m.TotalAmount
	m.fieldMap["sequence_number"] = m.SequenceNumber
	m.fieldMap["tx"] = m.Tx
}

func (m multisigHistory) clone(db *gorm.DB) multisigHistory {
	m.multisigHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m multisigHistory) replaceDB(db *gorm.DB) multisigHistory {
	m.multisigHistoryDo.ReplaceDB(db)
	return m
}

type multisigHistoryDo struct{ gen.DO }

func (m multisigHistoryDo) Debug() *multisigHistoryDo {
	return m.withDO(m.DO.Debug())
}

func (m multisigHistoryDo) WithContext(ctx context.Context) *multisigHistoryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m multisigHistoryDo) ReadDB() *multisigHistoryDo {
	return m.Clauses(dbresolver.Read)
}

func (m multisigHistoryDo) WriteDB() *multisigHistoryDo {
	return m.Clauses(dbresolver.Write)
}

func (m multisigHistoryDo) Session(config *gorm.Session) *multisigHistoryDo {
	return m.withDO(m.DO.Session(config))
}

func (m multisigHistoryDo) Clauses(conds ...clause.Expression) *multisigHistoryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m multisigHistoryDo) Returning(value interface{}, columns ...string) *multisigHistoryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m multisigHistoryDo) Not(conds ...gen.Condition) *multisigHistoryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m multisigHistoryDo) Or(conds ...gen.Condition) *multisigHistoryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m multisigHistoryDo) Select(conds ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m multisigHistoryDo) Where(conds ...gen.Condition) *multisigHistoryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m multisigHistoryDo) Order(conds ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m multisigHistoryDo) Distinct(cols ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m multisigHistoryDo) Omit(cols ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m multisigHistoryDo) Join(table schema.Tabler, on ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m multisigHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m multisigHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m multisigHistoryDo) Group(cols ...field.Expr) *multisigHistoryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m multisigHistoryDo) Having(conds ...gen.Condition) *multisigHistoryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m multisigHistoryDo) Limit(limit int) *multisigHistoryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m multisigHistoryDo) Offset(offset int) *multisigHistoryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m multisigHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *multisigHistoryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m multisigHistoryDo) Unscoped() *multisigHistoryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m multisigHistoryDo) Create(values ...*model.MultisigHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m multisigHistoryDo) CreateInBatches(values []*model.MultisigHistory, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m multisigHistoryDo) Save(values ...*model.MultisigHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m multisigHistoryDo) First() (*model.MultisigHistory, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultisigHistory), nil
	}
}

func (m multisigHistoryDo) Take() (*model.MultisigHistory, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultisigHistory), nil
	}
}

func (m multisigHistoryDo) Last() (*model.MultisigHistory, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultisigHistory), nil
	}
}

func (m multisigHistoryDo) Find() ([]*model.MultisigHistory, error) {
	result, err := m.DO.Find()
	return result.([]*model.MultisigHistory), err
}

func (m multisigHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MultisigHistory, err error) {
	buf := make([]*model.MultisigHistory, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m multisigHistoryDo) FindInBatches(result *[]*model.MultisigHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m multisigHistoryDo) Attrs(attrs ...field.AssignExpr) *multisigHistoryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m multisigHistoryDo) Assign(attrs ...field.AssignExpr) *multisigHistoryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m multisigHistoryDo) Joins(fields ...field.RelationField) *multisigHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m multisigHistoryDo) Preload(fields ...field.RelationField) *multisigHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m multisigHistoryDo) FirstOrInit() (*model.MultisigHistory, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultisigHistory), nil
	}
}

func (m multisigHistoryDo) FirstOrCreate() (*model.MultisigHistory, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultisigHistory), nil
	}
}

func (m multisigHistoryDo) FindByPage(offset int, limit int) (result []*model.MultisigHistory, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m multisigHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m multisigHistoryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m multisigHistoryDo) Delete(models ...*model.MultisigHistory) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *multisigHistoryDo) withDO(do gen.Dao) *multisigHistoryDo {
	m.DO = *do.(*gen.DO)
	return m
}
