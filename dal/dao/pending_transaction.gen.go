// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/0311xuyang/chain-util/dal/model"
)

func newPendingTransaction(db *gorm.DB, opts ...gen.DOOption) pendingTransaction {
	_pendingTransaction := pendingTransaction{}

	_pendingTransaction.pendingTransactionDo.UseDB(db, opts...)
	_pendingTransaction.pendingTransactionDo.UseModel(&model.PendingTransaction{})

	tableName := _pendingTransaction.pendingTransactionDo.TableName()
	_pendingTransaction.ALL = field.NewAsterisk(tableName)
	_pendingTransaction.ID = field.NewString(tableName, "id")
	_pendingTransaction.WalletAddress = field.NewString(tableName, "wallet_address")
	_pendingTransaction.Sequence = field.NewString(tableName, "sequence")
	_pendingTransaction.TxContent = field.NewString(tableName, "tx_content")
	_pendingTransaction.Signatures = field.NewString(tableName, "signatures")
	_pendingTransaction.CreateTime = field.NewTime(tableName, "create_time")
	_pendingTransaction.Memo = field.NewString(tableName, "memo")
	_pendingTransaction.Deleted = field.NewInt32(tableName, "deleted")

	_pendingTransaction.fillFieldMap()

	return _pendingTransaction
}

type pendingTransaction struct {
	pendingTransactionDo

	ALL           field.Asterisk
	ID            field.String
	WalletAddress field.String
	Sequence      field.String
	TxContent     field.String
	Signatures    field.String
	CreateTime    field.Time
	Memo          field.String
	Deleted       field.Int32

	fieldMap map[string]field.Expr
}

func (p pendingTransaction) Table(newTableName string) *pendingTransaction {
	p.pendingTransactionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pendingTransaction) As(alias string) *pendingTransaction {
	p.pendingTransactionDo.DO = *(p.pendingTransactionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pendingTransaction) updateTableName(table string) *pendingTransaction {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.WalletAddress = field.NewString(table, "wallet_address")
	p.Sequence = field.NewString(table, "sequence")
	p.TxContent = field.NewString(table, "tx_content")
	p.Signatures = field.NewString(table, "signatures")
	p.CreateTime = field.NewTime(table, "create_time")
	p.Memo = field.NewString(table, "memo")
	p.Deleted = field.NewInt32(table, "deleted")

	p.fillFieldMap()

	return p
}

func (p *pendingTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pendingTransaction) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["wallet_address"] = p.WalletAddress
	p.fieldMap["sequence"] = p.Sequence
	p.fieldMap["tx_content"] = p.TxContent
	p.fieldMap["signatures"] = p.Signatures
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["memo"] = p.Memo
	p.fieldMap["deleted"] = p.Deleted
}

func (p pendingTransaction) clone(db *gorm.DB) pendingTransaction {
	p.pendingTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pendingTransaction) replaceDB(db *gorm.DB) pendingTransaction {
	p.pendingTransactionDo.ReplaceDB(db)
	return p
}

type pendingTransactionDo struct{ gen.DO }

func (p pendingTransactionDo) Debug() *pendingTransactionDo {
	return p.withDO(p.DO.Debug())
}

func (p pendingTransactionDo) WithContext(ctx context.Context) *pendingTransactionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pendingTransactionDo) ReadDB() *pendingTransactionDo {
	return p.Clauses(dbresolver.Read)
}

func (p pendingTransactionDo) WriteDB() *pendingTransactionDo {
	return p.Clauses(dbresolver.Write)
}

func (p pendingTransactionDo) Session(config *gorm.Session) *pendingTransactionDo {
	return p.withDO(p.DO.Session(config))
}

func (p pendingTransactionDo) Clauses(conds ...clause.Expression) *pendingTransactionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pendingTransactionDo) Returning(value interface{}, columns ...string) *pendingTransactionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pendingTransactionDo) Not(conds ...gen.Condition) *pendingTransactionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pendingTransactionDo) Or(conds ...gen.Condition) *pendingTransactionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pendingTransactionDo) Select(conds ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pendingTransactionDo) Where(conds ...gen.Condition) *pendingTransactionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pendingTransactionDo) Order(conds ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pendingTransactionDo) Distinct(cols ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pendingTransactionDo) Omit(cols ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pendingTransactionDo) Join(table schema.Tabler, on ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pendingTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pendingTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pendingTransactionDo) Group(cols ...field.Expr) *pendingTransactionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pendingTransactionDo) Having(conds ...gen.Condition) *pendingTransactionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pendingTransactionDo) Limit(limit int) *pendingTransactionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pendingTransactionDo) Offset(offset int) *pendingTransactionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pendingTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pendingTransactionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pendingTransactionDo) Unscoped() *pendingTransactionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pendingTransactionDo) Create(values ...*model.PendingTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pendingTransactionDo) CreateInBatches(values []*model.PendingTransaction, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pendingTransactionDo) Save(values ...*model.PendingTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pendingTransactionDo) First() (*model.PendingTransaction, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingTransaction), nil
	}
}

func (p pendingTransactionDo) Take() (*model.PendingTransaction, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingTransaction), nil
	}
}

func (p pendingTransactionDo) Last() (*model.PendingTransaction, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingTransaction), nil
	}
}

func (p pendingTransactionDo) Find() ([]*model.PendingTransaction, error) {
	result, err := p.DO.Find()
	return result.([]*model.PendingTransaction), err
}

func (p pendingTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PendingTransaction, err error) {
	buf := make([]*model.PendingTransaction, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pendingTransactionDo) FindInBatches(result *[]*model.PendingTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pendingTransactionDo) Attrs(attrs ...field.AssignExpr) *pendingTransactionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pendingTransactionDo) Assign(attrs ...field.AssignExpr) *pendingTransactionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pendingTransactionDo) Joins(fields ...field.RelationField) *pendingTransactionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pendingTransactionDo) Preload(fields ...field.RelationField) *pendingTransactionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pendingTransactionDo) FirstOrInit() (*model.PendingTransaction, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingTransaction), nil
	}
}

func (p pendingTransactionDo) FirstOrCreate() (*model.PendingTransaction, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingTransaction), nil
	}
}

func (p pendingTransactionDo) FindByPage(offset int, limit int) (result []*model.PendingTransaction, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pendingTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pendingTransactionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pendingTransactionDo) Delete(models ...*model.PendingTransaction) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pendingTransactionDo) withDO(do gen.Dao) *pendingTransactionDo {
	p.DO = *do.(*gen.DO)
	return p
}
