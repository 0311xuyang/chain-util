// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/0311xuyang/chain-util/dal/model"
)

func newCoinPrice(db *gorm.DB, opts ...gen.DOOption) coinPrice {
	_coinPrice := coinPrice{}

	_coinPrice.coinPriceDo.UseDB(db, opts...)
	_coinPrice.coinPriceDo.UseModel(&model.CoinPrice{})

	tableName := _coinPrice.coinPriceDo.TableName()
	_coinPrice.ALL = field.NewAsterisk(tableName)
	_coinPrice.Date = field.NewTime(tableName, "date")
	_coinPrice.Price = field.NewString(tableName, "price")
	_coinPrice.Symbol = field.NewString(tableName, "symbol")
	_coinPrice.ChainName = field.NewString(tableName, "chain_name")

	_coinPrice.fillFieldMap()

	return _coinPrice
}

type coinPrice struct {
	coinPriceDo

	ALL       field.Asterisk
	Date      field.Time
	Price     field.String
	Symbol    field.String
	ChainName field.String

	fieldMap map[string]field.Expr
}

func (c coinPrice) Table(newTableName string) *coinPrice {
	c.coinPriceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c coinPrice) As(alias string) *coinPrice {
	c.coinPriceDo.DO = *(c.coinPriceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coinPrice) updateTableName(table string) *coinPrice {
	c.ALL = field.NewAsterisk(table)
	c.Date = field.NewTime(table, "date")
	c.Price = field.NewString(table, "price")
	c.Symbol = field.NewString(table, "symbol")
	c.ChainName = field.NewString(table, "chain_name")

	c.fillFieldMap()

	return c
}

func (c *coinPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coinPrice) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["date"] = c.Date
	c.fieldMap["price"] = c.Price
	c.fieldMap["symbol"] = c.Symbol
	c.fieldMap["chain_name"] = c.ChainName
}

func (c coinPrice) clone(db *gorm.DB) coinPrice {
	c.coinPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c coinPrice) replaceDB(db *gorm.DB) coinPrice {
	c.coinPriceDo.ReplaceDB(db)
	return c
}

type coinPriceDo struct{ gen.DO }

func (c coinPriceDo) Debug() *coinPriceDo {
	return c.withDO(c.DO.Debug())
}

func (c coinPriceDo) WithContext(ctx context.Context) *coinPriceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c coinPriceDo) ReadDB() *coinPriceDo {
	return c.Clauses(dbresolver.Read)
}

func (c coinPriceDo) WriteDB() *coinPriceDo {
	return c.Clauses(dbresolver.Write)
}

func (c coinPriceDo) Session(config *gorm.Session) *coinPriceDo {
	return c.withDO(c.DO.Session(config))
}

func (c coinPriceDo) Clauses(conds ...clause.Expression) *coinPriceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c coinPriceDo) Returning(value interface{}, columns ...string) *coinPriceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c coinPriceDo) Not(conds ...gen.Condition) *coinPriceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c coinPriceDo) Or(conds ...gen.Condition) *coinPriceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c coinPriceDo) Select(conds ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c coinPriceDo) Where(conds ...gen.Condition) *coinPriceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c coinPriceDo) Order(conds ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c coinPriceDo) Distinct(cols ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c coinPriceDo) Omit(cols ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c coinPriceDo) Join(table schema.Tabler, on ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c coinPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c coinPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c coinPriceDo) Group(cols ...field.Expr) *coinPriceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c coinPriceDo) Having(conds ...gen.Condition) *coinPriceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c coinPriceDo) Limit(limit int) *coinPriceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c coinPriceDo) Offset(offset int) *coinPriceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c coinPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *coinPriceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c coinPriceDo) Unscoped() *coinPriceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c coinPriceDo) Create(values ...*model.CoinPrice) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c coinPriceDo) CreateInBatches(values []*model.CoinPrice, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c coinPriceDo) Save(values ...*model.CoinPrice) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c coinPriceDo) First() (*model.CoinPrice, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoinPrice), nil
	}
}

func (c coinPriceDo) Take() (*model.CoinPrice, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoinPrice), nil
	}
}

func (c coinPriceDo) Last() (*model.CoinPrice, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoinPrice), nil
	}
}

func (c coinPriceDo) Find() ([]*model.CoinPrice, error) {
	result, err := c.DO.Find()
	return result.([]*model.CoinPrice), err
}

func (c coinPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CoinPrice, err error) {
	buf := make([]*model.CoinPrice, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c coinPriceDo) FindInBatches(result *[]*model.CoinPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c coinPriceDo) Attrs(attrs ...field.AssignExpr) *coinPriceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c coinPriceDo) Assign(attrs ...field.AssignExpr) *coinPriceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c coinPriceDo) Joins(fields ...field.RelationField) *coinPriceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c coinPriceDo) Preload(fields ...field.RelationField) *coinPriceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c coinPriceDo) FirstOrInit() (*model.CoinPrice, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoinPrice), nil
	}
}

func (c coinPriceDo) FirstOrCreate() (*model.CoinPrice, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CoinPrice), nil
	}
}

func (c coinPriceDo) FindByPage(offset int, limit int) (result []*model.CoinPrice, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c coinPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c coinPriceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c coinPriceDo) Delete(models ...*model.CoinPrice) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *coinPriceDo) withDO(do gen.Dao) *coinPriceDo {
	c.DO = *do.(*gen.DO)
	return c
}
