// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		ChainMetric:        newChainMetric(db, opts...),
		CoinPrice:          newCoinPrice(db, opts...),
		MultisigAccount:    newMultisigAccount(db, opts...),
		MultisigHistory:    newMultisigHistory(db, opts...),
		PendingTransaction: newPendingTransaction(db, opts...),
		StakingPercentage:  newStakingPercentage(db, opts...),
		TopDelegation:      newTopDelegation(db, opts...),
		TopUndelegation:    newTopUndelegation(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ChainMetric        chainMetric
	CoinPrice          coinPrice
	MultisigAccount    multisigAccount
	MultisigHistory    multisigHistory
	PendingTransaction pendingTransaction
	StakingPercentage  stakingPercentage
	TopDelegation      topDelegation
	TopUndelegation    topUndelegation
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		ChainMetric:        q.ChainMetric.clone(db),
		CoinPrice:          q.CoinPrice.clone(db),
		MultisigAccount:    q.MultisigAccount.clone(db),
		MultisigHistory:    q.MultisigHistory.clone(db),
		PendingTransaction: q.PendingTransaction.clone(db),
		StakingPercentage:  q.StakingPercentage.clone(db),
		TopDelegation:      q.TopDelegation.clone(db),
		TopUndelegation:    q.TopUndelegation.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		ChainMetric:        q.ChainMetric.replaceDB(db),
		CoinPrice:          q.CoinPrice.replaceDB(db),
		MultisigAccount:    q.MultisigAccount.replaceDB(db),
		MultisigHistory:    q.MultisigHistory.replaceDB(db),
		PendingTransaction: q.PendingTransaction.replaceDB(db),
		StakingPercentage:  q.StakingPercentage.replaceDB(db),
		TopDelegation:      q.TopDelegation.replaceDB(db),
		TopUndelegation:    q.TopUndelegation.replaceDB(db),
	}
}

type queryCtx struct {
	ChainMetric        *chainMetricDo
	CoinPrice          *coinPriceDo
	MultisigAccount    *multisigAccountDo
	MultisigHistory    *multisigHistoryDo
	PendingTransaction *pendingTransactionDo
	StakingPercentage  *stakingPercentageDo
	TopDelegation      *topDelegationDo
	TopUndelegation    *topUndelegationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ChainMetric:        q.ChainMetric.WithContext(ctx),
		CoinPrice:          q.CoinPrice.WithContext(ctx),
		MultisigAccount:    q.MultisigAccount.WithContext(ctx),
		MultisigHistory:    q.MultisigHistory.WithContext(ctx),
		PendingTransaction: q.PendingTransaction.WithContext(ctx),
		StakingPercentage:  q.StakingPercentage.WithContext(ctx),
		TopDelegation:      q.TopDelegation.WithContext(ctx),
		TopUndelegation:    q.TopUndelegation.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
